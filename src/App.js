import React, { Component, useState } from 'react';
import './App.css';
// import StreamlinedTable from './components/StreamlinedTable'
import {generateRandomObjs, NUM, formatDollars, WORDNUM} from './common/utils'
import {StreamlinedTable} from './components/Table'
import StreamlinedCardDisplay from './components/StreamlinedCardDisplay';
import CardDisplay from './components/card/CardDisplay';

// these are the viewing options for the component, if the user wants to view the Table or the Cards
const VIEWING_OPTIONS = ["TABLE", "CARDS"]

class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      viewing: VIEWING_OPTIONS[0],
    }
  }

  generateData() {
    // TODO maybe seperate the headers from the autoGenerated information....
    let generateData = [{
      field: "firstName",
      maxSize: 12,
      minSize: 4
    }, {
      field: "lastName",
      maxSize: 12,
      minSize: 4
    }, {
      field: "phone",
      type: WORDNUM,
      maxSize: 10,
      minSize: 10,
      format: phone => {
        let s = String(phone)
        return s.substring(0, 3) + "-" + s.substring(3, 6) + "-" + s.substring(6)
      }
    }, {
      field: "address",
      maxSize: 30,
      minSize: 12
    }, {
      field: "state",
      maxSize: 20,
      minSize: 5
    }, {
      field: "age",
      minAmount: 10,
      maxAmount: 100,
      type: NUM
    }, {
      field: "salary",
      maxSize: 9,
      minSize: 4,
      type: NUM,
      format: formatDollars
    }]
    return generateData
  }

  headers() {
    // TODO maybe seperate the headers from the autoGenerated information....
    let that = this
    let headers = [{
      name: "First Name",
      field: "firstName",
    }, {
      name: "Last Name",
      field: "lastName",
    }, {
      name: "Phone",
      field: "phone",
    }, {
      name: "Address",
      field: "address",
    }, {
      name: "State",
      field: "state",
    }, {
      name: "Age",
      field: "age",
    }, {
      name: "Salary",
      field: "salary"
    }, {
      name: "Delete",
      key: "id",
      // SHOW seperate the Delete Button from the Props Component
      component: function (props) {
          let deleteTheObject = () => {
            let pagination = {remove:() => 1}
            pagination.remove(props.data.id)
          }
          return <button className="setTableComponet" onClick={() => deleteTheObject()}>DELETE</button>
        }
    }]
    return headers
  }

  render() {
    // SHOW how to make the table into a sortable table with the headers
    // SHOW how to add in component elements to change the size of the cell in the table
    const fetch = (num) => {
        return new Promise((resolver, rejector) => {
          resolver(generateRandomObjs(this.generateData(), num))
        })
      }
    let viewingComponent =  <StreamlinedTable
      fetchData={fetch}
      headers={this.headers()}
      id="id" />
    if (this.state.viewing == VIEWING_OPTIONS[1]) {
      // then display the cards
      viewingComponent = <StreamlinedCardDisplay
        fetchData={fetch}
        id="card_display"
        />
    }
    return (
      <div className="App">
        <header className="App-header">
          <h1 className="App-title">Using Higher Order Components</h1>
          <div>
            <div className="button-link" onClick={() => this.setState({viewing: VIEWING_OPTIONS[0]})}>Table</div>
            <div className="button-link" onClick={() => this.setState({viewing: VIEWING_OPTIONS[1]})}>Pokemon Buying Board</div>
          </div>
        </header>
        <div className="container">
          {viewingComponent}
        </div>
        <div className="bottom-page"/>
      </div>
    );
  }
}

export default App;
